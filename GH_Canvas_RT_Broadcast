// ******************************* Using Section Start ******************************//
using System.IO;
using System.Drawing;
using System.Threading;
// ******************************* Using Section End ******************************//




// ******************************* RunScript Start ******************************//

if (!save) return;

    // getting the extent of the GH canvas by taking a look at where the components are located
    var extents = FindCanvasExtents();
    var rec = new System.Drawing.Rectangle(0, 0, extents[1], extents[3]);

    // getting the active GH canvas
    var thisCanvas = Grasshopper.Instances.ActiveCanvas;

    // settings for the GenerateHiResImage() method
    var ghSet = new Grasshopper.GUI.Canvas.GH_Canvas.GH_ImageSettings(path);
    ghSet.Folder = "Imgages";
    ghSet.Extension = "png";
    ghSet.FileName = "testFile";
    ghSet.BackColour = Color.FromArgb(0, 0, 0, 0);

    // generating temporary files for the screenshot
    Size size;
    // GenerateHiResImage() returns the path of the temporary png images in string format
    var imagePaths = thisCanvas.GenerateHiResImage(rec, ghSet, out size);
    tempFileDirs.AddRange(imagePaths);

    // understanding how big the final image is going to be
    int xCount = size.Width / 1000 + 1;
    int yCount = size.Height / 1000 + 1;

    // generating a string array that has the temporary images in a correct format
    // the temporary images are saved with a name like 0;0 0;1 0;2 1;0 1;1 1;2
    string tmepRoot = "";
    string[,] strings = new string[xCount, yCount];
    for (int i = 0; i < imagePaths.Count; i++) {

      // splitting the name of the files using ';' to add them to the string array
      string[] imagePathName = imagePaths[i].Split(';');
      if (i == 0) {
        string tempFileDir = System.IO.Path.GetDirectoryName(imagePaths[i]);
        tmepRoot = tempFileDir;
      }
      string xAddress = imagePathName[0].Substring(imagePathName[0].Length - 1);
      string yAddress = imagePathName[1].Substring(0, 1);
      int xIntAdd = Convert.ToInt32(xAddress);
      int yIntAdd = Convert.ToInt32(yAddress);
      strings[xIntAdd, yIntAdd] = imagePaths[i];
    }

    // creating a base64 string to act as the Real Time canvas image stream
    string base64String = "";
    // 1000x1000 pixels is the default temporary image size that the GenerateHiResImage() creates
    int imageDim = 1000;

    // combining the temporary images into one big image
    using (Bitmap result = new Bitmap(xCount * imageDim, yCount * imageDim))
    {

      // unfortunatley the multi-threaded for loop overrides the imagag in the same place
      // resulting in incorrect final images. So I had to revert back to single threaded usual for loops
      //      System.Threading.Tasks.Parallel.For(0, xCount, x => {
      for (int x = 0; x < xCount; x++) {
        //        System.Threading.Tasks.Parallel.For(0, yCount, y => {
        for (int y = 0; y < yCount; y++) {
          // we create a Graphics object to combine all the images together.
          using (Graphics g = Graphics.FromImage(result)){
            Image image = Image.FromFile(strings[x, y]);
            // for each iteration one part of the image is added to the rest of it
            // this seems to be the part that is most time consuming.
            // unfortunately, we can't multi-thread it either as it would rewrite data on the image
            // on the same spot
            g.DrawImage(image, x * imageDim, y * imageDim);

            // converting the image to a base64 stirng that can be broadcasted
            using(var stream = new MemoryStream())
            {
              result.Save(stream, System.Drawing.Imaging.ImageFormat.Png);
              var bytes = stream.ToArray();
              var str = Convert.ToBase64String(bytes);
              base64String = str;
            }
          }
          //          });
          //        });
        }
      }
      result.Save(path + "1.png");
      result.Dispose();
    }

    // after finishing the creation of the final image we have to delete the temporary files
    // otherwise they will slowly accumulate.
    // I tried to delete the files on the main thread, however, it would give the error: "Files are in use"
    // so I made another thread to deal with the files. This way the temporary images would be released by the
    // main thread and we can delete them instantly
    Thread tr = new Thread(DeleteTemporaryFiles);
    tr.Start();



    A = imagePaths;
    B = extents;
    C = base64String;
    
// ******************************* RunScript End ******************************//
    
    
// ******************************* Custom Code Section Start ******************************//

// A function that looks at all the GH_Components on the Canvas and
  // determines how big the final image has to be.
  int[] FindCanvasExtents() {
    int[] extents = new int[4];

    int minX = int.MaxValue;
    int minY = int.MaxValue;
    int maxX = int.MinValue;
    int maxY = int.MinValue;

    //finding the min/max of both X and Y on the canvas
    var thisGH_Objs = this.GrasshopperDocument.Objects;
    for(int i = 0; i < thisGH_Objs.Count; i++) {
      var tempObj = thisGH_Objs[i];
      int xDim = Convert.ToInt32(tempObj.Attributes.Pivot.X);
      int yDim = Convert.ToInt32(tempObj.Attributes.Pivot.Y);

      if (xDim < minX ) minX = xDim;
      if (yDim < minY ) minY = yDim;
      if (xDim > maxX ) maxX = xDim;
      if (yDim > maxY ) maxY = yDim;
    }

    extents[0] = minX;
    extents[1] = maxX;
    extents[2] = minY;
    extents[3] = maxY;
    return extents;
  }

  // as the file deletion function works in a second thread I made a public list of
  // stirngs for the temporary image file paths. By making the list public, I can access it from
  // any scope and any part of the program. In other words, the DeleteTemporaryFiles() function
  // would not need to have arguements
  public List<string> tempFileDirs = new List<string>();
  public void DeleteTemporaryFiles() {

    string root = tempFileDirs[tempFileDirs.Count - 1];

    var directory = Path.GetDirectoryName(root);
    // If directory does not exist, don't even try
    while (Directory.Exists(directory))
    {
      if (Directory.Exists(directory))
      {
        try {
          Directory.Delete(directory, true);
          Print("Temporary Files Cleared");
        }
        catch{

        }
      }
      else {
        Print(Directory.Exists(directory) + "");
      }
    }
  }

// ******************************* Custom Code Section End ******************************//
    
    
